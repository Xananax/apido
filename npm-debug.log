0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@3.3.5
3 info using node@v4.1.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/xananax/projects/apimaker',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/xananax/.npm/apimaker/0.5.0/package.tgz not in flight; packing
9 info lifecycle apimaker@0.5.0~prepublish: apimaker@0.5.0
10 silly lifecycle apimaker@0.5.0~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/home/xananax/.npm/apimaker/0.5.0/package.tgz',
11 verbose tar pack   '/home/xananax/projects/apimaker' ]
12 verbose tarball /home/xananax/.npm/apimaker/0.5.0/package.tgz
13 verbose folder /home/xananax/projects/apimaker
14 verbose addLocalTarball adding from inside cache /home/xananax/.npm/apimaker/0.5.0/package.tgz
15 silly cache afterAdd apimaker@0.5.0
16 verbose afterAdd /home/xananax/.npm/apimaker/0.5.0/package/package.json not in flight; writing
17 verbose afterAdd /home/xananax/.npm/apimaker/0.5.0/package/package.json written
18 silly publish { name: 'apimaker',
18 silly publish   version: '0.5.0',
18 silly publish   description: 'a package to create cross-consumption apis',
18 silly publish   main: 'index.js',
18 silly publish   scripts:
18 silly publish    { compile: 'babel src --out-dir lib',
18 silly publish      test: 'mocha -w --compilers js:babel/register --require should --recursive --ui bdd --reporter spec' },
18 silly publish   author: { name: 'xananax@yelostudio.com' },
18 silly publish   license: 'MIT',
18 silly publish   dependencies: { bluebird: '^2.10.2', joi: '^6.9.0', 'node.extend': '^1.1.5' },
18 silly publish   devDependencies: { babel: '^5.8.23', mocha: '^2.3.3', should: '^7.1.0' },
18 silly publish   readme: '# APIMaker\n\nA library to create environment-agnostic, full-on json, self-documenting apis. These apis can then be consumed any way you want, http, sockets, command line, or as a library.\n\nIt doesn\'t create exactly REST-like Apis, because those would be incompatible with other consumption methods.\n\n---\n\n# Install & Usage\n\n```sh\nnpm install --save apimaker\n```\n\nexample:\n\n```js\nimport apimaker from \'apimaker\';\n\nvar todos = [\n    {text:\'b\'}\n,   {text:\'a\'}\n]\n\napimaker({\n    name:\'Todos\'\n,   description:\'Returns todo items\'\n,   default:\'getAll\'\n,   key:\'todos\'\n,   methods:[\n        {\n            name:\'add\'\n        ,   method:[\'post\',\'get\']\n        ,   description:\'adds a todo item\'\n        ,   args:[\n                {\n                    name:\'text\'\n                ,   description:\'the todo text\'\n                ,   valid:\'string\'\n                ,   validate(arg){\n                        return typeof arg == \'string\';\n                    }\n                }\n            ]\n        ,   run({text},cb){\n                var index = todos.push({text}) -1 ;\n                cb(null,{index,text});\n            }\n        }\n    ,   {\n            name:\'update\'\n        ,   method:[\'put\',\'get\']\n        ,   description:\'updates a todo item\'\n        ,   args:[\n                {\n                    name:\'id\'\n                ,   description:\'the todo id\'\n                ,   valid:\'number\'\n                ,   validate(arg){\n                        return (\n                            (typeof arg == \'number\') ||\n                            (typeof arg == \'string\' && arg.match(/\\d+/))\n                        );\n                    }\n                ,   coerce(arg){\n                        return parseInt(arg);\n                    }\n                }\n            ,   {\n                    name:\'text\'\n                ,   description:\'the todo text\'\n                ,   valid:\'string\'\n                ,   validate(arg){\n                        return typeof arg == \'string\';\n                    }\n                }\n            ]\n        ,   run({text,id},cb){\n                var todo = todos[id];\n                if(!todo){return cb(new Error(\'todo was not found\'))}\n                todo.text = text;\n                cb(null,todo);\n            }\n        }\n    ,   {\n            name:\'get\'\n        ,   method:\'get\'\n        ,   description:\'returns a todo item\'\n        ,   args:[\n                {\n                    name:\'id\'\n                ,   description:\'the todo id\'\n                ,   valid:\'number\'\n                ,   validate(arg){\n                        return (\n                            (typeof arg == \'number\') ||\n                            (typeof arg == \'string\' && arg.match(/\\d+/))\n                        );\n                    }\n                ,   coerce(arg){\n                        return parseInt(arg);\n                    }\n                }\n            ]\n        ,   run({id},cb){\n                var todo = todos[id];\n                if(!todo){return cb(new Error(\'todo was not found\'))}\n                cb(null,todo);\n            }\n        }\n    ,   {\n            name:\'getAll\'\n        ,   method:\'get\'\n        ,   description:\'Returns all todos\'\n        ,   args:[]\n        ,   optionalArgs:[\n                {\n                    name:\'orderBy\'\n                ,   alias:\'o\'\n                ,   default:\'numerical\'\n                ,   description:\'ordering of the todo items\'\n                ,   valid:["alphabetical","numerical","a","n"]\n                ,   validate(arg){\n                        return ([\'alphabetical\',\'numerical\',\'a\',\'n\'].indexOf(arg)>=0)\n                    }\n                ,   coerce(arg){\n                        if(arg == \'a\'){return \'alphabetical\'}\n                        if(arg == \'n\'){return \'numerical\'}\n                        return arg;\n                    }\n                }\n            ]\n        ,   run({orderBy},cb){\n                if(orderBy==\'alphabetical\'){\n                    return cb(null,todos.slice().sort((a,b)=>{\n                        return ((a.text < b.text) ? \n                            - 1 : \n                            (a.text > b.text) ?\n                            1 :\n                            0\n                        );\n                    }))\n                }\n                return cb(null,todos);\n            }\n        }\n    ,   {\n            name:\'getUsers\'\n        ,   args:[\n                {\n                    name:\'id\'\n                }\n            ,   {\n                    name:\'path\'\n                }\n            ]\n        ,   run({id,path},cb){\n                cb(null,{path});\n            }\n        }\n    ]\n})\n.then(api=>{\n    //api is ready\n})\n.error(err=>{throw err})\n\n```\n\nthe `api` object will have five properties:\n\n- `api.run(command,args)`\n- `api.runPath(path,opts)`\n- `api.middleware(req,res,next)`\n- `api.methods`\n\nYou can call the methods in the example above as such:\n\n```js\napi.run(\'get\',{id:0})\n    .then(res=>console.log(res))\n    .error(err=>throw err)\n```\n\nor:\n```js\nvar req = {path:\'/get/0\',query:{}};\nvar res = {\n    json(val){\n        console.log(val)\n    }\n}\napi.middleware(req,res)\n```\n\nor:\n```js\napi.methods.get({id:0})\n    .then(res=>console.log(res))\n    .error(err=>throw err)\n```\n\nor:\n```js\napi.runPath(\'get/0\') //or api.runPath(\'get\',{id:0})\n    .then(res=>console.log(res))\n    .error(err=>throw err)\n```\n\nAdditionally, all commands can be explored by calling `help`, like so:\n\n```js\napi.run(\'help\').then()\napi.methods.help().then()\napi.middleware({path:\'/help\'},res)\napi.runPath(\'/help\')\n//or, for a specific command:\napi.run(\'help\',{name:\'getAll\'}).then()\napi.methods.help(\'getAll\').then()\napi.middleware({path:\'/help/getAll\'},res)\n```\n\n---\n\n# Objects:\n\n## Argument\n\nA minimal argument needs at least a property `name`:\n\n```js\nvar arg = {name:\'id\'}\n```\n\nHere\'s the complete list of properties:\n```js\nvar arg = {\n    name:\'orderBy\' //used when passing an object of arguments\n,   alias:\'o\' //used in command-line (not implemented yet)\n,   description:\'ordering of the todo items\' //displays in help\n,   valid:["alphabetical","numerical","a","n"] //displays in help, NOT used by any validation function\n,   validate(arg){ //should return a boolean\n        return ([\'alphabetical\',\'numerical\',\'a\',\'n\'].indexOf(arg)>=0)\n    }\n,   coerce(arg){ //called only if validation passed\n        if(arg == \'a\'){return \'alphabetical\'}\n        if(arg == \'n\'){return \'numerical\'}\n        return arg;\n    }\n}\n```\n\nOptional arguments take an additional property, `default`:\n```js\n// if `something` is not user specified, then "a value" will be returned\nvar arg = {\n    name:\'something\'\n,   default:\'a value\'\n}\n```\n\n\n## Method\n\nA minimal method needs the following:\n\n```js\nvar method = {\n    name:\'addTodo\' //name of the method\n,   run(props,cb){\n        cb(null,\'anything\')\n    }\n}\n```\n\nHere\'s the full listing of properties:\n\n```js\nvar method = {\n    name:\'addTodo\' //name of the method\n,   method:[\'get\',\'put\'] //string or array of http verbs for which the method is valid. Used only in "middleware"\n,   description:\'Returns all todos\' //used in help\n,   append:false //if true, additional arguments will be appended to the last argument (see below)\n,   args:[] //array of arguments objects\n,   optionalArgs:[] //array of arguments objects\n,   run(props,cb){\n        cb(null,\'anything\')\n    }\n}\n```\n\nWhen calling a method, one might pass either an object or an array as arguments.\nIn other words, for the following method:\n```js\nvar method = {\n    name:\'aMethod\'\n,   args:[\n        {name:\'first\'}\n    ,   {name:\'second\'}\n    ]\n,   run({first,second},cb){\n        cb(null,true)\n    }\n}\n```\n\nAll these calls are equivalent:\n```js\napi.run(\'aMethod\',{first:\'a\',second:\'b\'})\napi.run(\'aMethod\',[\'a\',\'b\'])\napi.runPath(\'/aMethod/a/b\')\napi.runPath(\'/aMethod\',[\'a\',\'b\'])\napi.runPath(\'/aMethod/a\',{second:\'b\'})\napi.runPath(\'/aMethod/a\',[,\'b\'])\napi.methods.aMethod([\'a\',\'b\'])\napi.methods.aMethod({first:\'a\',second:\'b\'})\n```\n\n**Note on the `append` property**: If true, arrays will be split on the arguments length, and the last argument will receive the remaining elements. In other words, for this call:\n```js\napi.run(\'aMethod\',[\'a\',\'b\',\'c\'])\n```\n\nthe `run` function will be called with:\n```js\nfunction run({first,second},cb){\n    console.log(first) //\'a\'\n    console.log(second) //[\'b\',\'c\']\n}\n```\n\nThis is useful for having paths of arbitrary length, or for nesting apis:\n\n```js\n//getUsers/0/some/path/\nvar method = {\n    name:\'getUsers\'\n,   append:true\n,   args:[\n        {\n            name:\'id\'\n        }\n    ,   {\n            name:\'path\'\n        }\n    ]\n,   run({id,path},cb){\n        api2.runPath(path) // /some/path\n            .then(result=>cb(null,result))\n            .error(cb)\n    }\n}\n```\n\n\n# API\n\nA minimal API needs the following:\n\n```js\nvar API = {\n    name:\'Todos\' //used in help\n,   methods:[] //an array of methods objects\n}\n```\n\nFull listing of properties:\n```js\nvar API = {\n    name:\'Todos\'\n,   description:\'Returns todo items\'\n,   default:\'getAll\' //when no method is provided, this will be the default method. Defaults to \'help\'\n,   methods:[]\n}\n```\n\nAfter going through the factory, an API will have an additional method, `help`, that will display information about the api or any method.\n\n---\n\n# Compiling and testing\n\n```sh\nnpm install --dev\n```\n\ntests:\n\n```sh\nnpm test\n```\n\ncompile:\n\n```sh\nnpm run compile\n```\n\n\nTests are a bit shit at the moment, but do make an ok job of testing the main functionality. The code is a bit of a mess and I\'d need to refactor before being able to run more useful tests.\n\n---\n\n# MIT License\n\nCopyright © Jad Sarout\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '7c322d7ef5f6f9e265225411a59bde738204bb3c',
18 silly publish   _id: 'apimaker@0.5.0',
18 silly publish   _shasum: '0c17936f038d1301d4070476eb2a7f08b53b010a',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name apimaker
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/apimaker
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /home/xananax/.npm/apimaker/0.5.0/package.tgz
26 verbose request uri https://registry.npmjs.org/apimaker
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 2:58:08 AM
29 verbose request using bearer token for auth
30 verbose request id a1f4964c7036fb8f
31 http request PUT https://registry.npmjs.org/apimaker
32 http 403 https://registry.npmjs.org/apimaker
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=60',
33 verbose headers   'content-length': '100',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Wed, 14 Oct 2015 23:58:10 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-fra1229-FRA',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1444867089.433993,VS0,VE1131' }
34 verbose request invalidating /home/xananax/.npm/registry.npmjs.org/apimaker on PUT
35 error publish Failed PUT 403
36 verbose stack Error: You do not have permission to publish 'apimaker'. Are you logged in as the correct user? : apimaker
36 verbose stack     at makeError (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
36 verbose stack     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
36 verbose stack     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:198:22)
36 verbose stack     at emitTwo (events.js:87:13)
36 verbose stack     at Request.emit (events.js:172:7)
36 verbose stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1063:14)
36 verbose stack     at emitOne (events.js:82:20)
36 verbose stack     at Request.emit (events.js:169:7)
36 verbose stack     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1009:12)
37 verbose statusCode 403
38 verbose pkgid apimaker
39 verbose cwd /home/xananax/projects/apimaker
40 error Linux 4.2.2-1-ARCH
41 error argv "/usr/bin/node" "/usr/bin/npm" "publish"
42 error node v4.1.2
43 error npm  v3.3.5
44 error code E403
45 error You do not have permission to publish 'apimaker'. Are you logged in as the correct user? : apimaker
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
